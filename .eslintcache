[{"D:\\dev\\kulani\\client\\src\\index.js":"1","D:\\dev\\kulani\\client\\src\\App.js":"2","D:\\dev\\kulani\\client\\src\\reportWebVitals.js":"3","D:\\dev\\kulani\\client\\src\\components\\Form.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":21524,"mtime":1610535153553,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":21258,"mtime":1610519099588,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1emlony",{"filePath":"13","messages":"14","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\dev\\kulani\\client\\src\\index.js",[],["20","21"],"D:\\dev\\kulani\\client\\src\\App.js",["22","23","24","25","26","27","28","29","30","31","32","33"],"D:\\dev\\kulani\\client\\src\\reportWebVitals.js",[],"D:\\dev\\kulani\\client\\src\\components\\Form.js",["34","35","36","37","38"],"\r\nimport Axios from 'axios';\r\nimport React from 'react';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport './Form.css'\r\nconst { Form, Button } = require(\"react-bootstrap\");\r\n\r\n//let g_fileName = \"\";\r\n\r\n/*\r\n//------------------------------------------------------------------------\r\n//Profile image send component\r\n//------------------------------------------------------------------------\r\nasync function sendProfileImage(){\r\n\r\n    let formData = new FormData();\r\n    let image = document.getElementById(\"KulaniImage\"); \r\n    //formData.append(\"profileImage\",\"C:\\Users\\Kulanin\\Pictures\\Saved Pictures\");\r\n    formData.append(\"file\",image.files[0]);\r\n    let url = \"http://127.0.0.1:5001/profileImage\";\r\n     //headers: { \"Content-Type\": \"application/json\" },\r\n    let requestOptions = {\r\n      method: \"POST\",\r\n      body: formData,\r\n      \r\n    };\r\n\r\n    console.log(image.files[0]);\r\n    let data  =  await fetch(url,requestOptions);\r\n  \r\n  \r\n    let Response = await data.json();\r\n  }\r\n  \r\n  function TestForm(props){\r\n  \r\n    return(\r\n  \r\n    <div>\r\n    <form controlId=\"basicForm\" \r\n    style={{ \"margin\": \"auto\",\"backgroundColor\":\"white\", \"border\":\"solid black 1px\",\r\n    \"height\":\"300px\",\"width\":\"50%\", \"display\":props.m_UploadImage}}\r\n >\r\n         <h3 >Upload Image</h3> <br/>\r\n          <input  type=\"file\" id=\"KulaniImage\"  placeholder=\"profileImage\" />\r\n          <button onClick={sendProfileImage} value=\"Upload\">Upload</button>\r\n          </form>\r\n  \r\n    </div>\r\n  \r\n  )\r\n  }\r\n*/\r\nclass StokvelForm extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.lastnameRef = React.createRef();\r\n        this.firstnameRef = React.createRef();\r\n        this.date = React.createRef();\r\n        this.amount = React.createRef();\r\n        this.usernameRef = React.createRef();\r\n        this.passwordRef = React.createRef();\r\n        this.passwordRef1 = React.createRef();\r\n        this.passwordRef2 = React.createRef();\r\n        this.profileImage = React.createRef();\r\n\r\n        this.state = {\r\n\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            memberid: \"\",\r\n            date: \"\",\r\n            amount: \"\",\r\n            cell: \"\",\r\n            password1: \"\",\r\n            password2: \"\",\r\n            parssword:\"\",\r\n            username: \"\",\r\n            m_UploadImage:\"\",\r\n            //below usued to manipulate form control background colors\r\n            FirstnameBorderColor: \"\",\r\n            LastnameBorderColor: \"\",\r\n            DateBorderColor: \"\",\r\n            AmountBorderColor: \"\",\r\n            MemberIdBorderColor: \"\",\r\n            //End of styled background colors\r\n            SuccessPaymentMessage: \"\",\r\n            ErrorPaymentMessage: \"\",\r\n            m_disableSubmitBtn: false,\r\n\r\n\r\n        }\r\n\r\n\r\n        this.MemberRegistration = this.MemberRegistration.bind(this);\r\n    }\r\n\r\n    ValidateInputValues(p_InputValueObject) {\r\n\r\n        if (this.props.buttonText === \"Register Now\") {\r\n\r\n            if (p_InputValueObject.firstname === \"\") {\r\n\r\n                console.log(\"Firstname cannot be empty\")\r\n               this.firstnameRef.current.focus();\r\n                this.setState({\r\n                    ErrorPaymentMessage: \"Firstname cannot be empty! \",\r\n                    FirstnameBorderColor: \"red\"\r\n                   \r\n                })\r\n\r\n               \r\n\r\n                return false;\r\n            } else if (p_InputValueObject.lastname === \"\") {\r\n\r\n                console.log(\"Lastname cannot be empty\")\r\n                this.lastnameRef.current.focus();\r\n                this.setState({\r\n                    ErrorPaymentMessage: \"Lastname cannot be empty! \",\r\n                    LastnameBorderColor:\"red\"\r\n                })\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        if (this.props.buttonText === \"Payment\") {\r\n\r\n            if (p_InputValueObject.date === \"\") {\r\n\r\n                console.log(\"Date cannot be empty\");\r\n                this.date.current.focus();\r\n                this.setState({\r\n                    ErrorPaymentMessage: \"Date cannot be empty! \",\r\n                    DateBorderColor:\"red\"\r\n                    \r\n                })\r\n\r\n                return false;\r\n\r\n            }else if (p_InputValueObject.amount === \"\") {\r\n\r\n                console.log(\"Amount cannot be empty\");\r\n                this.amount.current.focus();\r\n                this.setState({\r\n                    ErrorPaymentMessage: \"Amount cannot be empty! \",\r\n                    AmountBorderColor:\"red\",\r\n                })\r\n\r\n                return false;\r\n\r\n            }\r\n        }\r\n\r\n        if(p_InputValueObject.password1 != p_InputValueObject.password2){\r\n\r\n            this.passwordRef1.current.focus();\r\n            this.setState({\r\n                ErrorPaymentMessage: \"Password entered do not match!\",\r\n              \r\n            })\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n\r\n        if(isNaN(p_InputValueObject.amount)){\r\n\r\n            this.passwordRef1.current.focus();\r\n            this.setState({\r\n                ErrorPaymentMessage: \"Amount can only contain numerics\",\r\n              \r\n            })\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n         if (this.props.buttonText === \"Login\") {\r\n\r\n\r\n            \r\n            if (p_InputValueObject.username === \"\") {\r\n\r\n                console.log(\"Username  cannot be empty\");\r\n                this.date.current.focus();\r\n                this.setState({\r\n                    ErrorPaymentMessage: \"Username cannot be empty! \",\r\n                   \r\n                    \r\n                })\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            if (p_InputValueObject.password === undefined || p_InputValueObject.password === \"\") {\r\n\r\n                console.log(\"Password cannot be empty\");\r\n                this.date.current.focus();\r\n                this.setState({\r\n                    ErrorPaymentMessage: \"Password cannot be empty! \",\r\n                   \r\n                    \r\n                })\r\n\r\n                return;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        this.setState({\r\n            ErrorPaymentMessage: \"\"\r\n        })\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n    //Define an aleart function \r\n    //------------------------------------------------------------------\r\n\r\n    AlertMessage(p_Message, p_Variant, p_Show = false) {\r\n\r\n        return (\r\n\r\n            <Alert variant={p_Variant}\r\n             style={{ \"height\": 45, \"marginTop\": -20, \"transition-timming-function\":\"linear\",\"transitionDelay\":\"0.7\"}} show={p_Show}>\r\n                <p style={{ \"textAlign\": \"center\" }}>\r\n                    {p_Message}\r\n                </p>\r\n\r\n            </Alert>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n    async MemberRegistration(e,props) {\r\n      \r\n        \r\n\r\n        let memberObject = {};\r\n        let url = \"\";\r\n\r\n\r\n        //console.log(\"Image\" + this.state.m_UploadImage);\r\n        //console.log(\"username\" + this.state.username);\r\n\r\n        //memberObject.memberid = this.state.memberid;\r\n        memberObject.memberid = this.props.uniqueMemberid;\r\n        memberObject.firstname = this.state.firstname;\r\n        memberObject.lastname = this.state.lastname;\r\n        memberObject.cell = this.state.cell;\r\n        memberObject.date = this.state.date;\r\n        memberObject.amount = this.state.amount;\r\n        memberObject.password1 = this.state.password1;\r\n        memberObject.password2 = this.state.password2;\r\n        memberObject.username = this.state.username;\r\n        memberObject.password = this.state.password;\r\n       // memberObject.profileImage = this.state.m_UploadImage;\r\n\r\n       \r\n\r\n        if(memberObject.username === \"\"){\r\n\r\n            memberObject.username = localStorage.getItem(\"username\")\r\n        }\r\n\r\n        if( memberObject.password === undefined){\r\n\r\n            memberObject.password = localStorage.getItem(\"password\")\r\n        }\r\n\r\n        if (this.ValidateInputValues(memberObject)) {\r\n\r\n            let urlRegister = \"http://127.0.0.1:5001/insert\";\r\n            let urlPayment = \"http://127.0.0.1:5001/Payment\";\r\n            let urlLogin = \"http://127.0.0.1:5001/members/login\";\r\n\r\n            url = this.props.uniqueMemberid ? urlPayment : this.props.buttonText === \"Login\" && memberObject.username && memberObject.password  ? urlLogin : urlRegister;\r\n\r\n            let formData = new FormData();\r\n            let file = document.getElementById(\"KulaniImage2\");\r\n           \r\n            let fileObject = file.files[0];\r\n\r\n           // fileObject.originalname = localStorage.getItem(\"mySessionDataStorageId\");\r\n          \r\n        \r\n            formData.append(\"file\",fileObject);  \r\n            formData.append(\"_id\",localStorage.getItem(\"mySessionDataStorageId\"))\r\n            //formData.set(\"id\", localStorage.getItem(\"mySessionDataStorageId\"));\r\n\r\n        \r\n\r\n            console.log(this.props.m_UploadImage)\r\n            \r\n            let requestOptions = {\r\n                method: \"POST\",\r\n                headers: !this.props.m_UploadImage === \"block\"  ? \"\" : { \"Content-Type\": \"application/json\" },\r\n                body: this.props.m_UploadImage  === \"block\" ? formData : JSON.stringify({member: memberObject}),\r\n                 \r\n             \r\n            };\r\n\r\n          \r\n            \r\n\r\n\r\n            try {\r\n\r\n                if(this.props.m_UploadImage  === \"block\"){\r\n\r\n                    delete requestOptions.headers;\r\n                    url = \"http://127.0.0.1:5001/profileImage\";\r\n                    \r\n                    \r\n                   \r\n    \r\n                } \r\n\r\n                //let data  =  Axios.post(url,formData)\r\n\r\n                let data = await fetch(url, requestOptions);\r\n              \r\n                let Response = await data.json();\r\n\r\n                console.log(Response.data);\r\n\r\n                if (Response.data) {\r\n\r\n                    if (Response.data.message === \"You have successfully logged in\") {\r\n\r\n                        this.props.ToggleModalState(props,Response.data);\r\n                        localStorage.setItem(\"username\",memberObject.username );\r\n                        localStorage.setItem(\"password\", memberObject.password);\r\n                    }\r\n                    \r\n                    this.setState({\r\n\r\n                        SuccessPaymentMessage: Response.data.message ? Response.data.message : Response.data,\r\n                        ErrorPaymentMessage: \"\",\r\n                        m_disableSubmitBtn: true,\r\n                    })\r\n\r\n         \r\n                    setTimeout(() => {\r\n\r\n                        window.location.reload(false);\r\n                        \r\n                    }, 1500);\r\n         \r\n                    //sessionStorage.setItem(\"mySessionDataStorage\",\"Hi \" + Response.data.data.firstname + ` (that's not me)`)\r\n                    if (Response.data.message != \"Member Image successfully uploaded\"){\r\n                        localStorage.setItem(\"mySessionDataStorageFirstname\",Response.data.data.firstname);\r\n                        localStorage.setItem(\"mySessionDataStorageId\",Response.data.data._id);\r\n\r\n                    }\r\n                    \r\n                  \r\n                    return;\r\n                }\r\n                else if (Response.error) {\r\n                    this.setState({\r\n\r\n                        ErrorPaymentMessage: Response.error,\r\n                        SuccessPaymentMessage: \"\"\r\n                    })\r\n\r\n                    setTimeout(() => {\r\n\r\n                        window.location.reload(false);\r\n                        \r\n                    }, 1500);\r\n\r\n                    return;\r\n                }else if(Response.error === undefined){\r\n\r\n                    this.setState({\r\n\r\n                        ErrorPaymentMessage: \"File was not renamed properly\",\r\n                        SuccessPaymentMessage: \"\"\r\n                    })\r\n                }\r\n\r\n            }\r\n            catch (p_Error) {\r\n\r\n                console.log(\"there was error \" + p_Error)\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n\r\n        console.log(event.target.name);\r\n        console.log(event.target.value)\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        if(name ===\"username\"){\r\n            localStorage.removeItem(\"username\") \r\n        }\r\n\r\n        if(name ===\"password\"){\r\n            localStorage.removeItem(\"password\") \r\n        }\r\n\r\n        // if(name ===\"m_UploadImage\"){\r\n            \r\n        //     const value = event.target.files;\r\n        //     //g_fileName = value;\r\n        //     this.setState({\r\n        //         m_UploadImage: value,\r\n        //     })\r\n        // }\r\n\r\n\r\n      \r\n\r\n        this.setState({ [name]: value,\r\n        \r\n            FirstnameBorderColor:\"\",\r\n            LastnameBorderColor:\"\",\r\n            AmountBorderColor:\"\",\r\n            DateBorderColor:\"\",\r\n            ErrorPaymentMessage: \"\"\r\n        })\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n\r\n    render() {\r\n\r\n        console.log(\"Kulani upload form\", this.props.m_UploadImage)\r\n\r\n        const classPaymentForm = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classPaymentForm : \"block\",\r\n            \"marginTop\": 10,\r\n\r\n        }\r\n\r\n        const classRegisterForm = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classRegisterForm : \"block\",\r\n            \"marginTop\": 10\r\n\r\n        }\r\n\r\n        //-----------------------------------------------------------------------\r\n        const ClassFirstname = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classRegisterForm : \"block\",\r\n            \"marginTop\": 10,\r\n\r\n        }\r\n\r\n\r\n            //-----------------------------------------------------------------------\r\n            const classLogin = {\r\n\r\n                \"display\": this.props.dataset ? this.props.classLogin : \"block\",\r\n                \"marginTop\": 10,\r\n    \r\n            }\r\n         //-----------------------------------------------------------------------\r\n         const styleFirstname = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classRegisterForm : \"block\",\r\n            \"marginTop\": 10,\r\n            \"borderColor\":this.state.FirstnameBorderColor\r\n\r\n        }\r\n\r\n\r\n        const styleLastname = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classRegisterForm : \"block\",\r\n            \"marginTop\": 10,\r\n            \"borderColor\":this.state.LastnameBorderColor\r\n            \r\n\r\n        }\r\n\r\n        const styleCell = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classRegisterForm : \"block\",\r\n            \"marginTop\": 10\r\n\r\n        }\r\n\r\n        const styleDate = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classPaymentForm : \"block\",\r\n            \"marginTop\": 10,\r\n            \"borderColor\":this.state.DateBorderColor\r\n\r\n        }\r\n\r\n        const styleAmount = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classPaymentForm : \"block\",\r\n            \"marginTop\": 10,\r\n            \"borderColor\":this.state.AmountBorderColor\r\n            \r\n\r\n        }\r\n\r\n        const styleMemberId = {\r\n\r\n            \"display\": this.props.dataset ? this.props.classPaymentForm : \"block\",\r\n            \"marginTop\": 10\r\n\r\n        }\r\n\r\n        const styleUploadForm = {\r\n\r\n            \"display\": this.props.m_UploadImage,\r\n        \r\n        }\r\n\r\n        \r\n\r\n  \r\n\r\n        console.log(\"KulanUniqueID\" + this.props.uniqueMemberid)\r\n        \r\n        console.log(\"buttonText\" + this.props.buttonText)\r\n\r\n        return (\r\n\r\n\r\n            <Form className=\"classForm\"   >\r\n            \r\n        <h2 style={{\"textAlign\":\"center\"}}>{this.state.ErrorPaymentMessage || this.state.SuccessPaymentMessage ? \"\": this.props.buttonText}</h2>\r\n              <div>{this.AlertMessage(this.state.ErrorPaymentMessage ? this.state.ErrorPaymentMessage : this.state.SuccessPaymentMessage, this.state.ErrorPaymentMessage ? \"danger\" : \"success\", this.state.ErrorPaymentMessage || this.state.SuccessPaymentMessage ? true : false)}</div>  \r\n                <Form.Group controlId=\"basicForm\" style={{ \"margin\": 30 }} >\r\n\r\n                    <Form.Label className={ClassFirstname} style={styleFirstname}  >Firstname</Form.Label>\r\n                    <Form.Control className={ClassFirstname} style={styleFirstname} ref={this.firstnameRef} type=\"firstname\" onChange={this.handleChange} placeholder=\"firstname\" name=\"firstname\"></Form.Control>\r\n                    \r\n                   \r\n\r\n                    <Form.Label className={classRegisterForm} style={styleLastname}>Lastname</Form.Label>\r\n                    <Form.Control className={classRegisterForm} ref={this.lastnameRef} style={styleLastname} type=\"lastname\" onChange={this.handleChange} placeholder=\"lastname\" name=\"lastname\"></Form.Control>\r\n                    \r\n                    {/** \r\n                    <Form.Label className={classRegisterForm} style={styleCell}>Cell</Form.Label>\r\n                    <Form.Control className={classRegisterForm} style={styleCell} type=\"cell\" onChange={this.handleChange} placeholder=\"cell\" name=\"cell\"></Form.Control>\r\n                    */}\r\n                    <Form.Label className={this.props.buttonText === \"Register Now\" ? classRegisterForm : classLogin} \r\n                    style={this.props.buttonText === \"Register Now\" ? classRegisterForm : classLogin}   >Username</Form.Label>\r\n                    <Form.Control className={this.props.buttonText === \"Register Now\" ? classRegisterForm : classLogin} \r\n                        style={this.props.buttonText === \"Register Now\" ? classRegisterForm : classLogin}\r\n                    ref={this.usernameRef} type=\"username\" onChange={this.handleChange} placeholder=\"username\" value={localStorage.getItem(\"username\") }  name=\"username\"></Form.Control>\r\n\r\n                    <Form.Label className={classLogin} style={classLogin}  >Password</Form.Label>\r\n                    <Form.Control className={classLogin} style={classLogin} ref={this.passwordRef} type=\"password\" onChange={this.handleChange} placeholder=\"password\" value={localStorage.getItem(\"password\")} name=\"password\"></Form.Control>\r\n\r\n                    <Form.Label className={classRegisterForm} style={styleLastname}>Password</Form.Label>\r\n                    <Form.Control className={classRegisterForm} ref={this.passwordRef1} style={styleLastname} type=\"password1\" onChange={this.handleChange} placeholder=\"password\" name=\"password1\"></Form.Control>\r\n\r\n                 \r\n                    <Form.Label className={classRegisterForm} style={styleLastname}>Retype Password</Form.Label>\r\n                    <Form.Control className={classRegisterForm} ref={this.passwordRef2} style={styleLastname} type=\"password2\" onChange={this.handleChange} placeholder=\"password\" name=\"password2\"></Form.Control>\r\n\r\n                    \r\n                    {/*<Form.Label className={styleUploadForm} style={styleUploadForm}>Upload Image</Form.Label>*/}\r\n                   <Form.Control className={styleUploadForm} ref={this.profileImage} id=\"KulaniImage2\" style={styleUploadForm} type=\"file\" onChange={this.handleChange} placeholder=\"profileImage\" name=\"file\"></Form.Control>\r\n                   <Form.Control className={styleUploadForm}  id=\"KulaniImage3\" style={styleUploadForm} type=\"hidden\" onChange={this.handleChange} placeholder=\"profileImage\" name=\"_id\"></Form.Control>\r\n                    \r\n\r\n                    <Form.Label className={classPaymentForm} style={styleDate}  >Date</Form.Label>\r\n                    <Form.Control className={classPaymentForm} ref={this.date} style={styleDate} type=\"date\" onChange={this.handleChange} placeholder={new Date().toLocaleDateString()} name=\"date\" ></Form.Control>\r\n                    <Form.Label className={classPaymentForm}  style={styleAmount}  >Amount</Form.Label>\r\n                    <Form.Control className={classPaymentForm} ref={this.amount} style={styleAmount} type=\"amount\" onChange={this.handleChange} placeholder=\"R500.00\" name=\"amount\"></Form.Control>\r\n                    \r\n                    \r\n                    {/*<Form.Label className={classPaymentForm} style={styleMemberId}   >Amount ID</Form.Label>\r\n                    <Form.Control className={classPaymentForm} style={styleMemberId} type=\"memberid\" onChange={this.handleChange} disabled=\"disabled\" value={this.props.uniqueMemberid} name=\"memberid\"></Form.Control>\r\n                    */}\r\n                    {/**   <Form.Text className=\"text-Muted\">Just testing </Form.Text>*/}\r\n\r\n                    <Button variant={this.props.buttonText === \"Upload Image\" ? \"danger\" :\"primary\"} style={{ \"marginRight\": 15, \"marginBottom\": 50, \"marginTop\": 20 }}\r\n                     onClick={(e) => this.MemberRegistration(e)}\r\n                     disabled={this.state.m_disableSubmitBtn}\r\n                     \r\n                     >{this.props.buttonText}\r\n                    \r\n                     </Button>\r\n                    <Button variant=\"primary\" style={{ \"marginBottom\": 50, \"marginTop\": 20 }} onClick={(props) => {this.props.ToggleModalState(props,\"Cancel\")}}>Cancel</Button> <br />\r\n\r\n                </Form.Group>\r\n\r\n\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default StokvelForm",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},{"ruleId":"43","severity":1,"message":"47","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":13},{"ruleId":"43","severity":1,"message":"48","line":11,"column":10,"nodeType":"45","messageId":"46","endLine":11,"endColumn":30},{"ruleId":"43","severity":1,"message":"49","line":12,"column":9,"nodeType":"45","messageId":"46","endLine":12,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":33,"column":15,"nodeType":"52","endLine":33,"endColumn":105},{"ruleId":"50","severity":1,"message":"51","line":35,"column":14,"nodeType":"52","endLine":39,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":43,"column":110,"nodeType":"52","endLine":43,"endColumn":181},{"ruleId":"50","severity":1,"message":"51","line":44,"column":14,"nodeType":"52","endLine":44,"endColumn":86},{"ruleId":"53","severity":1,"message":"54","line":64,"column":30,"nodeType":"55","messageId":"56","endLine":64,"endColumn":32},{"ruleId":"43","severity":1,"message":"57","line":330,"column":10,"nodeType":"45","messageId":"46","endLine":330,"endColumn":14},{"ruleId":"53","severity":1,"message":"54","line":408,"column":41,"nodeType":"55","messageId":"56","endLine":408,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":693,"column":17,"nodeType":"60","endLine":693,"endColumn":27},{"ruleId":"43","severity":1,"message":"47","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":160,"column":41,"nodeType":"63","messageId":"64","endLine":160,"endColumn":43},{"ruleId":"61","severity":1,"message":"62","line":367,"column":47,"nodeType":"63","messageId":"64","endLine":367,"endColumn":49},{"ruleId":"43","severity":1,"message":"65","line":506,"column":15,"nodeType":"45","messageId":"46","endLine":506,"endColumn":24},{"ruleId":"43","severity":1,"message":"66","line":530,"column":15,"nodeType":"45","messageId":"46","endLine":530,"endColumn":28},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Axios' is defined but never used.","'createBrowserHistory' is defined but never used.","'Form' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Test' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'styleCell' is assigned a value but never used.","'styleMemberId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]